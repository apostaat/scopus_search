["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$reagent.dom","~:imports",null,"~:requires",["^ ","~$reagent.impl.util","^;","~$reagent.impl.protocols","^<","~$p","^<","~$reagent.ratom","^=","~$module$Users$artemapostatov$work$wp-test$scopus-search$node-modules$react-dom$index","^>","~$reagent.impl.template","^?","~$reagent.impl.batching","^@","~$util","^;","~$tmpl","^?","~$ratom","^=","~$batch","^@","~$react-dom","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$roots",["^ ","~:meta",["^ ","~:file","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","~:line",9,"~:column",20,"~:end-line",9,"~:end-column",25,"~:private",true],"^P",true,"^7","~$reagent.dom/roots","^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",25,"^M",1,"^L",9,"^N",9,"~:tag","~$any"],"~$unmount-comp",["^ ","~:protocol-inline",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",11,"^M",8,"^N",11,"^O",20,"^P",true,"~:arglists",["~#list",["~$quote",["^W",[["~$container"]]]]]],"^P",true,"^7","~$reagent.dom/unmount-comp","~:variadic",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",20,"~:method-params",["^W",[["^Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^M",1,"^L",11,"^N",11,"~:max-fixed-arity",1,"~:fn-var",true,"^V",["^W",["^X",["^W",[["^Y"]]]]]],"~$render-comp",["^ ","^U",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",15,"^M",8,"^N",15,"^O",19,"^P",true,"^V",["^W",["^X",["^W",[["~$comp","^Y","~$callback"]]]]]],"^P",true,"^7","~$reagent.dom/render-comp","^[",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",19,"^10",["^W",[["^16","^Y","^17"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",15,"^N",15,"^13",3,"^14",true,"^V",["^W",["^X",["^W",[["^16","^Y","^17"]]]]]],"~$re-render-component",["^ ","^U",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",25,"^M",8,"^N",25,"^O",27,"^P",true,"^V",["^W",["^X",["^W",[["^16","^Y"]]]]]],"^P",true,"^7","~$reagent.dom/re-render-component","^[",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",27,"^10",["^W",[["^16","^Y"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",25,"^N",25,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["^16","^Y"]]]]]],"~$render",["^ ","^U",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",28,"^M",7,"^N",28,"^O",13,"^V",["^W",["^X",["^W",[["^16","^Y"],["^16","^Y","~$callback-or-compiler"]]]]],"~:doc","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.","~:top-fn",["^ ","^[",false,"^13",3,"^10",["^W",[["^16","^Y"],["^16","^Y","^1<"]]],"^V",["^W",[["^16","^Y"],["^16","^Y","^1<"]]],"^12",["^W",[null,null]]]],"^7","~$reagent.dom/render","^[",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",13,"^1>",["^ ","^[",false,"^13",3,"^10",["^W",[["^16","^Y"],["^16","^Y","^1<"]]],"^V",["^W",[["^16","^Y"],["^16","^Y","^1<"]]],"^12",["^W",[null,null]]],"^10",["^W",[["^16","^Y"],["^16","^Y","^1<"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",28,"^N",28,"^13",3,"^14",true,"^V",["^W",[["^16","^Y"],["^16","^Y","^1<"]]],"^1=","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."],"~$unmount-component-at-node",["^ ","^U",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",53,"^M",7,"^N",53,"^O",32,"^V",["^W",["^X",["^W",[["^Y"]]]]],"^1=","Remove a component from the given DOM node."],"^7","~$reagent.dom/unmount-component-at-node","^[",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",32,"^10",["^W",[["^Y"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",53,"^N",53,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^Y"]]]]],"^1=","Remove a component from the given DOM node."],"~$dom-node",["^ ","^U",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",58,"^M",7,"^N",58,"^O",15,"^V",["^W",["^X",["^W",[["~$this"]]]]],"^1=","Returns the root DOM node of a mounted component.","~:deprecated","1.2.0"],"^7","~$reagent.dom/dom-node","^[",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",15,"^10",["^W",[["^1C"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",58,"^1D","1.2.0","^N",58,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^1C"]]]]],"^1=","Returns the root DOM node of a mounted component."],"~$force-update-all",["^ ","^U",null,"^J",["^ ","^K","/Users/artemapostatov/work/wp-test/scopus-search/resources/public/js/compiled/out/reagent/dom.cljs","^L",64,"^M",7,"^N",64,"^O",23,"^V",["^W",["^X",["^W",[[]]]]],"^1=","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.","^1D","1.2.0"],"^7","~$reagent.dom/force-update-all","^[",false,"^K","resources/public/js/compiled/out/reagent/dom.cljs","^O",23,"^10",["^W",[[]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",64,"^1D","1.2.0","^N",64,"^13",0,"^14",true,"^V",["^W",["^X",["^W",[[]]]]],"^1=","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^C","^=","^=","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:else","~:compiler","~:callback"]],"~:order",["^1M","^1N","^1L"]],"^1=",null]